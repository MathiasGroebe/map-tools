import os
from exif import Image
from datetime import datetime
from PyQt5.QtCore import QDateTime
from qgis.core import QgsFeatureRequest
import shutil


def decimal_to_dms(value, is_latitude=True):
    degrees = int(abs(value))
    minutes_float = (abs(value) - degrees) * 60
    minutes = int(minutes_float)
    seconds = round((minutes_float - minutes) * 60, 2)
    direction = ''
    if is_latitude:
        direction = 'N' if value >= 0 else 'S'
    else:
        direction = 'E' if value >= 0 else 'W'
    return degrees, minutes, seconds, direction


layer = iface.activeLayer()

# for f in layer.getFeatures():
#     print(f["time"].toSecsSinceEpoch())



folder = "/home/mgroebe/Schreibtisch/geocoding/Tracks/meine Bilder"
out_folder = "/home/mgroebe/Schreibtisch/geocoding/Tracks/meine Bilder/out"

images_processed = 0
images_referenced = 0

# Falls der Ordner nicht existiert, erstelle ihn
if not os.path.exists(out_folder):
    os.makedirs(out_folder)

files = os.listdir(folder)
for file in files:
    
    if not os.path.isfile(os.path.join(folder, file)):
        continue
    if not file.lower().endswith((".jpg", ".jpeg")):
        continue

    with open(os.path.join(folder, file) , "rb") as image:
        a_image = Image(image.read())
        print(file)
        print(a_image.gps_latitude)
        print(a_image.gps_longitude)
        print(a_image.gps_altitude)
        print(a_image.datetime_original)


        taken = QDateTime.fromString(a_image.datetime_original, "yyyy:MM:dd HH:mm:ss")

        images_processed += 1


        # Request feature by time
        exp = f"epoch(time) = {taken.toSecsSinceEpoch() * 1000}"
        request = QgsFeatureRequest().setFilterExpression(exp)
        for matching_feature in layer.getFeatures(request):
            print("Feature: ", matching_feature.id())
            print(f"Coords: {matching_feature.geometry().asPoint()}")


            point = matching_feature.geometry().asPoint()
            print(decimal_to_dms(point.y(), is_latitude=True))
            print(decimal_to_dms(point.x(), is_latitude=False))   


            src_path = os.path.join(folder, file)
            dst_path = os.path.join(out_folder, file)
            shutil.copy2(src_path, dst_path)

            with open(dst_path, "rb") as out_image_file:
                out_image = Image(out_image_file.read())

            # Set GPS EXIF data
            lat_deg, lat_min, lat_sec, lat_ref = decimal_to_dms(point.y(), is_latitude=True)
            lon_deg, lon_min, lon_sec, lon_ref = decimal_to_dms(point.x(), is_latitude=False)

            out_image.gps_latitude = (lat_deg, lat_min, lat_sec)
            out_image.gps_latitude_ref = lat_ref
            out_image.gps_longitude = (lon_deg, lon_min, lon_sec)
            out_image.gps_longitude_ref = lon_ref

            # Write updated EXIF back to file
            with open(dst_path, "wb") as updated_image_file:
                updated_image_file.write(out_image.get_file())

            images_referenced += 1

        print("---")


print(f"Images processed: {images_processed}")
print(f"Images referenced: {images_referenced}")